%% Exercise 5 - b)

%% Declarations
error_vectors_norms = [];
stepsizes = [];
computed_norms = [];
numerical_norms = [];
%% Iterations for each tau selected.
for q=1:4
    tic;
    disp("Executing Tau raised to power of minus: ");
    disp(q);
    h = 10^(-q);
    x = 0:h:10;

    stepsizes = [stepsizes, h];

    y = zeros(1, length(x)); 
    y(1) = 0.3;

    F_xy = @(t,y) -10*y + 30 - 18*exp(-t);           
    solution = @(t) 3 - (2*exp(-t)) - 0.7*exp(-10*t);

    solution_vector = [];
    solution_vector = [solution_vector, solution(x(1))];

    for i=1:(length(x)-1)
        %% Runge-Kutta equations
        k_1 = F_xy(x(i),y(i));
        k_2 = F_xy(x(i)+0.5*h,y(i)+0.5*h*k_1);
        k_3 = F_xy((x(i)+0.5*h),y(i)+0.5*h*k_2);
        k_4 = F_xy((x(i)+h),y(i)+k_3*h);
        
        y(i+1) = y(i) + (1/6)*(k_1+2*k_2+2*k_3+k_4)*h; 
        solution_vector = [solution_vector, solution(x(i+1))];
    end
    
    %% Computation of norms
    euclidean_distance = norm(abs(y - solution_vector));
    
    error_vectors_norms = [error_vectors_norms, euclidean_distance];
        
    
    computed_current_norm = norm(y);
    computed_norms = [computed_norms, computed_current_norm];
    %disp(norm(solution_vector));
    numerical_current_norm = norm(solution_vector);
    numerical_norms = [numerical_norms, numerical_current_norm];
    toc;
end

%% Graphs
fprintf(' %.16f', error_vectors_norms)
figure(1);
loglog(stepsizes, error_vectors_norms, '-or', 'DisplayName', 'Error');
hold on;
loglog(stepsizes, stepsizes.^4, '--b', 'DisplayName', 'h^4')
xlabel('Step Size');
ylabel('Errors');
legend('Location', 'northwest');
hold off;


figure(2);
hold on;
disp(stepsizes);
plot(stepsizes, computed_norms, 'g-', 'DisplayName', 'Numerical');
plot(stepsizes, numerical_norms, 'o-', 'DisplayName', 'Analytical');
ylabel("y(t) with respect to time");
xlabel("y values");
legend('Numerical', 'Analytical');
hold off;




